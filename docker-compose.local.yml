version: '2.1'
services:
  #######################################
  # PHP Backoffice API Docker container
  #######################################
  api:
    build:
      context: .
      dockerfile: Dockerfile.api
    image: ddc_api
    container_name: ddc_api
    ports:
      - "8888:80"
    extra_hosts:
      - "a407:192.168.43.150"
      - "mariadb:172.18.0.52"
      - "api.ddc.vm:172.18.0.1"
      - "service01:172.18.0.1"
      - "service02:172.18.0.1"
    expose:
      - "80"
      - "443"
      - "1215"
      - "4200"
      - "9000"
      - "9003"
    volumes:
      - ../_htdocs_ddc/ddc_api:/app/
      - ./:/docker/
      - ./etc/php/development.ini:/opt/docker/etc/php/development.ini
    # cap and privileged needed for slowlog
    cap_add:
      - SYS_PTRACE
    privileged: true
    env_file:
      - etc/environment.yml
      - etc/environment.development.yml
    environment:
      VIRTUAL_HOST: "backofficeapi.ddc.vm"
      VIRTUAL_PORT: "80"
      PHP_XDEBUG_ENABLED: 1
      XDEBUG_SESSION: "PHPSTORM"
      PHP_IDE_CONFIG: serverName=backofficeapi.ddc.vm
    networks:
      default:
        ipv4_address: 172.18.0.100

  cron:
    extends:
      file: common-services.yml
      service: beego
    container_name: ddc_cron
    ports:
      - "8099:8099"
    environment:
      VIRTUAL_HOST: "cron.ddc.vm"
      VIRTUAL_PORT: "8099"
    mem_limit: 100m
    networks:
      default:
        ipv4_address: 172.18.0.99
    working_dir: "/go/src/ddc_cron"
    entrypoint: "./run.sh"

  #######################################
  # DDC Backoffice Angular Front
  #######################################
  backoffice:
    image: jojomi/nginx-static
    container_name: ddc_backoffice
    volumes:
      - ./:/docker/
      - ./etc/nginx-static/default.conf:/etc/nginx/sites-enabled/default.conf
      - ../_htdocs_ddc/ddc_backoffice_dev_build:/var/www:ro
#      - ../_htdocs_ddc/ddc_backoffice/dist:/var/www:ro
    ports:
      - "3001:80"
    mem_limit: 100m
    environment:
      - WEB_DOCUMENT_ROOT=/var/www/dist
      - VIRTUAL_HOST=backoffice.ddc.vm
      - VIRTUAL_PORT=80
    networks:
      default:
        ipv4_address: 172.18.0.50

  #######################################
  # DDC React Frontend
  #######################################
  app:
    image: jojomi/nginx-static
    container_name: ddc_app
    volumes:
      - ./:/docker/
      - ./etc/nginx-static/default.conf:/etc/nginx/sites-enabled/default.conf
      - ../_htdocs_ddc/ddc_app_build:/var/www:ro
    ports:
      - "18080:80"
    environment:
      VIRTUAL_HOST: "ddc.vm"
      VIRTUAL_PORT: "80"
    mem_limit: 300m
    networks:
      default:
        ipv4_address: 172.18.0.51

  # app-node:
  #   build:
  #     context: docker/node/
  #     dockerfile: Dockerfile
  #   user: node
  #   image: ddc_app
  #   container_name: ddc_app
  #   volumes:
  #     - ./:/docker/
  #     - ../_htdocs_ddc/ddc_app:/home/app
  #   ports:
  #     - "3001:3000"
  #   environment:
  #     VIRTUAL_HOST: "ddc.vm"
  #     VIRTUAL_PORT: "3000"
  #   mem_limit: 300m
  #   networks:
  #     default:
  #       ipv4_address: 172.18.0.51
  #   entrypoint: "/docker/docker/node/run_react.sh"

  mentor:
    build:
      context: docker/node/
      dockerfile: Dockerfile
    user: node
    image: ddc_app_mentor
    container_name: ddc_app_mentor
    volumes:
      - ./:/docker/
      - ../_htdocs_ddc/ddc_app_mentoring:/home/app
    ports:
      - "3002:3000"
    environment:
      NEXT_TELEMETRY_DISABLED: "1"
      NODE_ENV: "production"
      VIRTUAL_HOST: "mentor.ddc.vm"
      VIRTUAL_PORT: "3000"
    mem_limit: 500m
    networks:
      default:
        ipv4_address: 172.18.0.54
    entrypoint: "/docker/docker/node/run_nextjs.sh"

  app_arisan:
    build:
      context: docker/node/
      dockerfile: Dockerfile
    user: node
    image: ddc_app_arisan
    container_name: ddc_app_arisan
    volumes:
      - ./:/docker/
      - ../_htdocs_ddc/ddc_app_arisan:/home/app
    ports:
      - "3003:3000"
    environment:
      NEXT_TELEMETRY_DISABLED: "1"
      NODE_ENV: "production"
      VIRTUAL_HOST: "arisan.ddc.vm"
      VIRTUAL_PORT: "3000"
    mem_limit: 500m
    networks:
      default:
        ipv4_address: 172.18.0.57
    entrypoint: "/docker/docker/node/run_nextjs.sh"

  # passenger:
  #   build:
  #     context: docker/passenger/
  #     dockerfile: Dockerfile
  #   image: ddc_passenger
  #   container_name: ddc_passenger
  #   volumes:
  #     - ./:/docker/
  #     - ../_htdocs_ddc/ddc_app_mentoring:/home/app
  #     - ./docker/passenger/webapp.conf:/etc/nginx/sites-enabled/webapp.conf
  #   ports:
  #     - "18081:80"
  #     - "3001:3000"
  #   environment:
  #     PASSENGER_APP_ENV: "production"
  #     NODE_ENV: "production"
  #     VIRTUAL_HOST: "mentor.ddc.vm"
  #     VIRTUAL_PORT: "80"
  #   mem_limit: 300m
  #   networks:
  #     default:
  #       ipv4_address: 172.18.0.56

  #######################################
  # MariaDB server
  #######################################
  mariadb:
    build:
      context: docker/mariadb/
      dockerfile: MariaDB-10.2.8.Dockerfile
    image: ddc_mariadb
    container_name: ddc_mariadb
    ports:
      - "3316:3306"
    volumes:
      - mariadb:/var/lib/mysql
      - ./etc/mariadb/z999-docker1.cnf:/etc/mysql/conf.d/z999-docker.cnf
      - ./backup:/storage
    env_file:
      - etc/environment.yml
    environment:
      # TZ: "Etc/UTC"
      TZ: "Asia/Jakarta"
    mem_limit: 1g
    networks:
      default:
        ipv4_address: 172.18.0.52

  # mariadb2:
  #   build:
  #     context: docker/mariadb/
  #     dockerfile: MariaDB-10.2.8.Dockerfile
  #   image: ddc_mariadb
  #   container_name: ddc_mariadb2
  #   ports:
  #     - "3317:3306"
  #   volumes:
  #     - mariadb2:/var/lib/mysql
  #     - ./etc/mariadb/z999-docker2.cnf:/etc/mysql/conf.d/z999-docker.cnf
  #     - ./backup:/storage
  #   env_file:
  #     - etc/environment.yml
  #   mem_limit: 1g
  #   networks:
  #     default:
  #       ipv4_address: 172.18.0.53

  mongodb:
    image: "mongo:4.0-xenial"
    container_name: ddc_mongodb
    volumes:
      - mongodb:/data/db
    ports:
      - "27017:27017"
    # restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: root
    mem_limit: 400m
    networks:
      default:
        ipv4_address: 172.18.0.55

  #######################################
  # KrakenD
  #######################################
  krakend:
    image: devopsfaith/krakend:config-watcher
    container_name: ddc_krakend
    ports:
      - "8080:8080"
    expose:
      - "8090"
      - "9091"
    environment:
      VIRTUAL_HOST: "api.ddc.vm"
      VIRTUAL_PORT: "8080"
      KRAKEND_CONFIG: "ddcApiGateway.json"
      # FC_ENABLE: 1
      # FC_SETTINGS: "./settings"
      # FC_PARTIALS: "./partials"
      # FC_TEMPLATES: "./partials"
      # FC_OUT: "/etc/krakend/krakend.json"
    mem_limit: 800m
    volumes:
      - ./:/docker/
      - ../_htdocs_ddc/ddc_api_gateway:/etc/krakend
    networks:
      default:
        ipv4_address: 172.18.0.59
    extra_hosts:
      - "service01:172.18.0.1"
      - "service02:172.18.0.1"
      - "servicestaging01:172.18.0.1"
      - "servicestaging02:172.18.0.1"

  #######################################
  # Elastic
  #######################################
  # elastic:
  #   image: elasticsearch:7.10.1
  #   container_name: ddc_elastic
  #   environment:
  #     - node.name=ddc_es01
  #     - cluster.name=es-docker-cluster
  #     # - discovery.seed_hosts=es02,es03
  #     # - cluster.initial_master_nodes=es01,es02,es03
  #     - bootstrap.memory_lock=true
  #     - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
  #     - discovery.type=single-node
  #   ulimits:
  #     memlock:
  #       soft: -1
  #       hard: -1
  #   mem_limit: 2g
  #   volumes:
  #     - es01:/usr/share/elasticsearch/data
  #   ports:
  #     - 127.0.0.1:9200:9200
  #   expose:
  #     - "9200"
  #     - "9300"
  #   networks:
  #     default:
  #       ipv4_address: 172.18.0.60

  #######################################
  # DDC Services
  #######################################
  # article:
  #   extends:
  #     file: common-services.yml
  #     service: beego
  #   container_name: ddc_article
  #   ports:
  #     - "8091:8091"
  #   environment:
  #     VIRTUAL_HOST: "article.ddc.vm"
  #     VIRTUAL_PORT: "8091"
  #     GO_SVC: "ddc_article"
  #   networks:
  #     default:
  #       ipv4_address: 172.18.0.91
  #   working_dir: "/go/src/ddc_article"

  auth:
    extends:
      file: common-services.yml
      service: beego
    container_name: ddc_auth
    # links:
    #   - mariadb
    #   - mongodb
    ports:
      - "8083:8083"
    expose:
      - "2345"
    environment:
      VIRTUAL_HOST: "auth.ddc.vm"
      VIRTUAL_PORT: "8083"
      GO_SVC: "ddc_authentication"
    networks:
      default:
        ipv4_address: 172.18.0.83
    working_dir: "/go/src/ddc_authentication"
    # entrypoint: "bee dlv -package=\"ddc_auth\" -port=2345"

  challenge:
    extends:
      file: common-services.yml
      service: beego
    container_name: ddc_challenge
    ports:
      - "8092:8092"
    environment:
      VIRTUAL_HOST: "challenge.ddc.vm"
      VIRTUAL_PORT: "8092"
      GO_SVC: "ddc_challenge"
    networks:
      default:
        ipv4_address: 172.18.0.92
    working_dir: "/go/src/ddc_challenge"

  # notification:
  #   extends:
  #     file: common-services.yml
  #     service: beego
  #   container_name: ddc_notification
  #   ports:
  #     - "8082:8082"
  #   environment:
  #     VIRTUAL_HOST: "notif.ddc.vm"
  #     VIRTUAL_PORT: "8082"
  #     GO_SVC: "ddc_notification"
  #   networks:
  #     default:
  #       ipv4_address: 172.18.0.82
  #   working_dir: "/go/src/ddc_notification"

  product:
    extends:
      file: common-services.yml
      service: beego
    container_name: ddc_product
    ports:
      - "8084:8084"
    environment:
      VIRTUAL_HOST: "product.ddc.vm"
      VIRTUAL_PORT: "8084"
      GO_SVC: "ddc_product"
    networks:
      default:
        ipv4_address: 172.18.0.84
    working_dir: "/go/src/ddc_product"

  payment:
    extends:
      file: common-services.yml
      service: beego
    container_name: ddc_payment
    ports:
      - "8087:8087"
    environment:
      VIRTUAL_HOST: "payment.ddc.vm"
      VIRTUAL_PORT: "8087"
      GO_SVC: "ddc_payment"
    networks:
      default:
        ipv4_address: 172.18.0.87
    working_dir: "/go/src/ddc_payment"

  profile:
    extends:
      file: common-services.yml
      service: beego
    container_name: ddc_profile
    ports:
      - "8086:8086"
    environment:
      VIRTUAL_HOST: "profile.ddc.vm"
      VIRTUAL_PORT: "8086"
      GO_SVC: "ddc_profile"
    networks:
      default:
        ipv4_address: 172.18.0.86
    working_dir: "/go/src/ddc_profile"

  scheduler:
    extends:
      file: common-services.yml
      service: beego
    container_name: ddc_scheduler
    ports:
      - "8088:8088"
    environment:
      VIRTUAL_HOST: "scheduler.ddc.vm"
      VIRTUAL_PORT: "8088"
      GO_SVC: "ddc_scheduler"
    networks:
      default:
        ipv4_address: 172.18.0.88
    working_dir: "/go/src/ddc_scheduler"

  shipping:
    extends:
      file: common-services.yml
      service: beego
    container_name: ddc_shipping
    ports:
      - "8081:8081"
    environment:
      VIRTUAL_HOST: "shipping.ddc.vm"
      VIRTUAL_PORT: "8081"
      GO_SVC: "ddc_shipping"
    networks:
      default:
        ipv4_address: 172.18.0.81
    working_dir: "/go/src/ddc_shipping"

  event:
    extends:
      file: common-services.yml
      service: beego
    container_name: ddc_event
    ports:
      - "8093:8093"
    environment:
      VIRTUAL_HOST: "event.ddc.vm"
      VIRTUAL_PORT: "8093"
      GO_SVC: "ddc_event"
    networks:
      default:
        ipv4_address: 172.18.0.93
    working_dir: "/go/src/ddc_event"

  order:
    extends:
      file: common-services.yml
      service: beego
    container_name: ddc_order
    ports:
      - "8085:8085"
    mem_limit: 400m
    environment:
      VIRTUAL_HOST: "order.ddc.vm"
      VIRTUAL_PORT: "8085"
      GO_SVC: "ddc_order"
    networks:
      default:
        ipv4_address: 172.18.0.85
    working_dir: "/go/src/ddc_order"

  voucher:
    extends:
      file: common-services.yml
      service: beego
    container_name: ddc_voucher
    ports:
      - "8089:8089"
    environment:
      VIRTUAL_HOST: "voucher.ddc.vm"
      VIRTUAL_PORT: "8089"
      GO_SVC: "ddc_voucher"
    networks:
      default:
        ipv4_address: 172.18.0.89
    working_dir: "/go/src/ddc_voucher"

  discount:
    extends:
      file: common-services.yml
      service: beego
    container_name: ddc_discount
    ports:
      - "8094:8094"
    environment:
      VIRTUAL_HOST: "discount.ddc.vm"
      VIRTUAL_PORT: "8094"
      GO_SVC: "ddc_discount"
    networks:
      default:
        ipv4_address: 172.18.0.94
    working_dir: "/go/src/ddc_discount"

  queue:
    extends:
      file: common-services.yml
      service: beego
    container_name: ddc_queue
    # expose:
    #   - "18095"
    ports:
      - "8095:8095"
      - "18095:18095"
    environment:
      VIRTUAL_HOST: "queue.ddc.vm"
      VIRTUAL_PORT: "8095"
      GO_SVC: "ddc_queue"
    networks:
      default:
        ipv4_address: 172.18.0.95
    working_dir: "/go/src/ddc_queue"

  mentoring:
    extends:
      file: common-services.yml
      service: beego
    container_name: ddc_mentoring
    ports:
      - "8096:8096"
      - "18096:18096"
    environment:
      VIRTUAL_HOST: "mentoring.ddc.vm"
      VIRTUAL_PORT: "8096"
      GO_SVC: "ddc_mentoring"
    networks:
      default:
        ipv4_address: 172.18.0.96
    working_dir: "/go/src/ddc_mentoring"

  arisan:
    extends:
      file: common-services.yml
      service: beego
    container_name: ddc_arisan
    ports:
      - "8097:8097"
      - "18097:18097"
    environment:
      VIRTUAL_HOST: "arisan.ddc.vm"
      VIRTUAL_PORT: "8097"
      GO_SVC: "ddc_arisan"
    networks:
      default:
        ipv4_address: 172.18.0.97
    working_dir: "/go/src/ddc_arisan"

  #######################################
  # Redis
  #######################################
  redis:
    image: redis:alpine
    container_name: ddc_redis
    networks:
      default:
        ipv4_address: 172.18.0.254
    volumes:
      - redis:/data
    mem_limit: 200m
    # restart: unless-stopped
    environment:
      VIRTUAL_HOST: "redis.ddc.vm"
      VIRTUAL_PORT: "80"

  #######################################
  # RabbitMQ
  #######################################
  rabbit:
    image: rabbitmq:3.8.0-management
    container_name: ddc_rabbit
    hostname: ddc_rabbit
    networks:
      default:
        ipv4_address: 172.18.0.253
    ports:
      - "5672:5672"
      - "15672:15672"
    mem_limit: 300m
    # restart: unless-stopped
    volumes:
      - ./etc/rabbitmq/enabled_plugins:/etc/rabbitmq/enabled_plugins
      - rabbitmq-homedir:/var/lib/rabbitmq
    environment:
      RABBITMQ_VM_MEMORY_HIGH_WATERMARK: "55%"
      RABBITMQ_ERLANG_COOKIE: "RABBITCOOKIE"
      RABBITMQ_NODENAME: "rabbit@ddc_rabbit"
      RABBITMQ_DEFAULT_USER: "dev"
      RABBITMQ_DEFAULT_PASS: "secret"
      VIRTUAL_HOST: "rabbit.ddc.vm"
      VIRTUAL_PORT: "15672"

  #######################################
  # Prometheus
  #######################################
  # prom:
  #   image: prom/prometheus
  #   container_name: ddc_prom
  #   volumes:
  #     - ./etc/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
  #   networks:
  #     default:
  #       ipv4_address: 172.18.0.253
  #   ports:
  #     - "9090:9090"
  #   expose:
  #     - "9091"
  #     - "9093"
  #     - "9094"
  #   extra_hosts:
  #     - "service01:172.18.0.1"
  #     - "service02:172.18.0.1"
  #     - "servicestaging01:172.18.0.1"
  #   mem_limit: 200m
  #   environment:
  #     VIRTUAL_HOST: "prom.ddc.vm"
  #     VIRTUAL_PORT: "9090"

  #######################################
  # Grafana
  #######################################
  # grafana:
  #   image: grafana/grafana
  #   container_name: ddc_grafana
  #   networks:
  #     default:
  #       ipv4_address: 172.18.0.252
  #   ports:
  #     - "3000:3000"
  #   volumes:
  #     - grafana-storage:/var/lib/grafana
  #   links:
  #     - mariadb
  #   mem_limit: 512m
  #   environment:
  #     VIRTUAL_HOST: "grafana.ddc.vm"
  #     VIRTUAL_PORT: "3000"
  #     GF_SECURITY_ADMIN_PASSWORD: "secret"
  #     # GF_INSTALL_PLUGINS: "grafana-clock-panel,grafana-simple-json-datasource,ryantxu-ajax-panel"


#######################################
# Volumes
#######################################
volumes:
  mariadb:
    driver: local
    driver_opts:
      type: bind
      device: /home/lxc/mariadb/db
      o: bind
  # mariadb2:
  #   driver: local
  #   driver_opts:
  #     type: bind
  #     device: /home/lxc/mariadb2/db
  #     o: bind
  mongodb:
    driver: local
    driver_opts:
      type: bind
      device: /home/lxc/mongodata
      o: bind
  gosrc:
    driver: local
    driver_opts:
      type: bind
      device: /home/nath/go/src
      o: bind
  gopkg:
    driver: local
    driver_opts:
      type: bind
      device: /home/nath/go/pkg
      o: bind
  # grafana-storage:
  #   driver: local
  #   driver_opts:
  #     type: bind
  #     device: /home/nath/Documents/dc_beego/backup/grafana
  #     o: bind
  rabbitmq-homedir:
    driver: local
    driver_opts:
      type: bind
      device: /home/lxc/rabbitmq
      o: bind
  redis:
    driver: local
    driver_opts:
      type: bind
      device: /home/lxc/redis_ddc
      o: bind
  es01:
    driver: local
    driver_opts:
      type: bind
      device: /home/lxc/elasticdata
      o: bind

networks:
  default:
    external:
      name: dev
